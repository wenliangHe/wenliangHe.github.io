<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[java设计模式的七大原则]]></title>
    <url>%2F2019%2F09%2F18%2FjavaDesignKnowLegde%2F</url>
    <content type="text"><![CDATA[设计模式是怎么产生的？为什么要有设计模式？设计模式如何使用？起源像很多软件工程技术一样,java设计模式起源于建筑领域，软件工程起步只有短短的几十年，还处在行业的幼儿期，与已经拥有几千年底蕴的建筑工程相比，后者有太多值得学习和借鉴的地方。 哈佛大学的建筑学博士克里斯托弗.亚历山大，是建筑学领域的模式之父。他与其研究团队用了约20年的时间，对住宅和周边环境进行了大量的调查研究，发现人们对舒适住宅和城市环境存在一些共同的认同规律，将它们归纳成253个模式。对每一个模式都从前提条件、目标问题、 解决方案三个方面进行了描述，并给出了从需求分析到结构设计再到经典实例的过程模型。所以，对模式的定义可以抽象为在特定环境下，人们为了解决某类重复出现问题，而总结归纳出来的有效解决方案。 诞生GoF将模式的概念引入软件工程领域，这标志着软件模式的诞生。软件模式并非仅限于设计模式，还包括架构模式、分析模式和过程模式等，实际上，在软件开发生命周期的每一个阶段都存在着一些被认同的模式。 软件模式主要由四部分构成，包括待解决问题、约束条件、解决方案、优点。 软件模式与具体的应用领域无关，也就是说无论从事的是移动开发、桌面开发、Web开发还是嵌入式软件的开发，都可以使用软件模式。 在软件模式中，设计模式是研究最为深入的分支，它融合了众多专家的设计经验，已经在成千上万的软件中得以应用。 1995年， GoF将收集和整理好的23种设计模式汇编成了一本名叫《设计模式》的书，该书的出版也标志着设计模式正式成为面向对象版软件工程的一个重要研究分支。 定义设计模式（Design Pattern）是被反复使用、多数人知晓、经过分类的、代码设计经验的总结方案，是为了解决某些具体问题产生的解决方案。使用目的：为了代码可重用性、让代码更容易被他人理解、保证代码可靠性。 设计模式使代码编写真正工程化；设计模式是软件工程的基石脉络，如同大厦的结构一样。 设计模式如何使用这个问题到现在都没有一个具体的标准，因为每一个软件产品的研发者，他们设计产品的习惯，个性，即时面对相同的产品，他们产品的设计也可能不会相同，所以就会产生不同的解决方案， 一旦有了不同的解决方案，他们的设计模式就会不一样，所以设计模式如何使用是一个无解的问题。但是使用设计模式我们必须要掌握设计模式的七大原则。设计模式的七大原则单一职责原则 开闭原则 依赖倒转原则 接口隔离原则 里氏替换原则 迪米特原则 合成复用原则 单一职责原则 定义：一个类只负责一个功能领域内的职责 作用：降低类的复杂度，当修改一个功能时，降低对其他功能的影响，提供类的可读性 开闭原则 定义：对扩展开放，对更改关闭 作用：保证以前代码的准确性，使开发者更专注于新扩展的代码上 里氏替换原则 定义：任何基类出现的地方，子类一定可以出现 作用：在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象，开闭原则实现的手段之一 依赖倒转原则 定义：针对接口编程，抽象不依赖于细节，细节应依赖于抽象 作用：多数情况下，开闭原则，里氏替换原则，依赖倒转原则会同时出现，开闭原则是目标，里氏替换原则是基础，依赖倒转是手段。 接口隔离原则 定义：使用多个专门的接口，不使用单一的总接口 解释：当一个接口太大时，我们需要把他拆分成更小的接口，但不能违反单一职责原则，每个接口应该承担一种相对独立的角色，不该干的事情不干，该干的事情都要干 迪米特原则 定义：一个实体应当尽量少的与其他实体发生相互作用 释义：应该尽量减少对象之间的交互，如果两个对象之间不必彼此直接通信，那么这两个对象就不应当发生任何直接的相互作用，如果其中的一个对象需要调用另一个对象的某一个方法的话，可以通过第三者转发这个调用。 合成复用原则 定义：尽量使用组合而非继承 释义：就是在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分，新的对象通过这些对象的委派达到复用已有功能的目的More info: Deployment]]></content>
      <categories>
        <category>java设计模式</category>
      </categories>
      <tags>
        <tag>实用</tag>
        <tag>个人博客</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java基础知识-面向对象的思想]]></title>
    <url>%2F2019%2F09%2F17%2Fjava-knowledge-base%2F</url>
    <content type="text"><![CDATA[什么是面向对象？面向对象是一种程序设计思想，计算机程序的设计实质上就是将现实中的一些事物的特征抽离出来描述成一些计算机事件的过程，这种抽象的过程中，我们把具体的事物封装成一个一个的整体进行描述，使被描述的对象具备一些系统性、整体性的的行为和特征，我们把这种设计思想称为面向对象。 什么是对象？对象是怎么产生的？对象和类的关系？在java的世界当中，万物皆对象。对象是人们要进行研究的任何事物，从简单的一个小分子到复杂的汽车飞机都可以看做对象，只是有时对象要根据人们研究问题的需要来确定，对象不一定是具体的，有时也可以表示抽象的规则或计划。对象是类的实例化，类是对象的抽象，这是类和对象的关系。在java程序中对象是通过类的实例化产生的。所以在java程序中，先有类，才有对象。而在现实中，类的产生是人对一些相同特征的事物进行总结而产生的，所以在现实生活中是先有对象，才有类。 java程序示例//创建类的过程 public class Person{ private String name; private Integer age; private String sex; public void setName(String name){ this.name = name; } public void setAge(Integer Age){ this.age = age; } public void setSex(String sex){ this.sex = sex; } public String getName(){ return this.name; } public Integer getAge(){ return this.Age; } public String getSex(){ return this.sex; } public static void main(String[] args){ Person personOne= new Person();//类的实例化的过程，先有类才有对象。 personOne.setName("one");//对象的赋值过程。 System.out.println(personOne.getName());//使用对象。 } }]]></content>
      <categories>
        <category>java基础知识</category>
      </categories>
      <tags>
        <tag>实用</tag>
        <tag>个人博客</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F09%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
